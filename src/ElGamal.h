#ifndef ELGAMAL_H
#define ELGAMAL_H

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <math.h>
#include <gmp.h>
#include <unistd.h>
#include <algorithm>
#include <gmpxx.h>
#include <bitset>
#include <sstream>
#include <random>
#include <chrono>

//Renaming the big integer type from the Gnu Multiple Precision Library to something more readable
using bigInt = mpz_class;

namespace ElGamal
{
	struct PublicKey
	 {
		PublicKey(std::string _p, std::string _g, bigInt privKey);
	 	bigInt p;
	 	bigInt q;
	 	bigInt g;
	 	bigInt h;
	 };

	//Type for holding the two cipher strings generated by ElGamal Encryption
	struct CipherBlock
	{
		CipherBlock(bigInt c1, bigInt c2): first(c1), second(c2){}
		bigInt first;
		bigInt second;
	};

	//Main functionality
	std::string encrypt(std::string plaintext, PublicKey pubKey);
	std::string decrypt(std::string cipherText, PublicKey pubKey, bigInt privKey);

	//Padding - Implementation of the PKCS padding scheme
	bigInt PKCS(std::string message, int nBitLen);
	std::string inversePKCS(bigInt input, int nBitLen);

	//Block handling
	std::vector<bigInt> getMessageBlocks(std::string message, unsigned int pBitSize);
	CipherBlock encryptBlock(bigInt m, PublicKey pubKey);
	bigInt decryptBlock(CipherBlock c, PublicKey pubKey, bigInt privKey);
	std::string concatCipherBlocks(std::vector<CipherBlock> cipherBlocks, unsigned int pBitSize);
	std::vector<CipherBlock> parseCiphertext(std::string ciphertext, unsigned int pBitSize);

	//Helpers
	bigInt modExp(bigInt x, bigInt y, bigInt p);
	int bitCount(bigInt n);
	std::string plaintextToHexString(std::string plaintext);
	std::string hexStringToPlaintext(std::string s);

	//Generators
	bigInt generateRandomNumber(int bits);
	bigInt generateRandomNumber(bigInt min, bigInt max);
	PublicKey generatePublicKey(bigInt privKey);

	//Printers
	void printParameters(PublicKey pubKey, bigInt privKey);
	void printNumberDetails(std::string name, bigInt a);
	void printCipherBlock(CipherBlock c);

	//Testers
	void runTestVectors();
	void runTestVector1();
	void runTestVector2();
}
#endif
